image: node:11.14.0

cache:
  paths:
    - node_modules/

stages:
  - test
  - build
  - review
  - preprod

variables:
  CI_ENVIRONMENT_DOMAIN: wp.env.gitlab.rmc-rostov.ru
  DATABASE_HOST: 10.0.3.10
  DATABASE_PORT: 5432
  DATABASE_USER: postgres
  CONTAINER_TEST_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}
  CONTAINER_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}:latest

LINT:
  stage: test
  script:
    - cd frontend/
    - npm install --silent
    - npm run lint

BUILD:
  stage: build
  only:
    - tags
    - /^feature_.*$/
    - /^infra_.*$/
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker build --target web -t ${CONTAINER_TEST_IMAGE} .
    - docker push ${CONTAINER_TEST_IMAGE}

REVIEW:START:
  stage: review
  only:
    - tags
    - /^feature_.*$/
    - /^infra_.*$/
  variables:
    DATABASE_NAME: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
    DJANGO_SETTINGS_MODULE: backend.settings.production
    CI_CONTAINER_NAME_SLUG: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  environment:
    name: ${CI_JOB_STAGE}/${CI_COMMIT_REF_NAME}
    url: http://${CI_COMMIT_REF_SLUG}.${CI_ENVIRONMENT_DOMAIN}
  before_script:
    - apk add curl postgresql-client --no-cache
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - createdb -h ${DATABASE_HOST} -U ${DATABASE_USER} ${DATABASE_NAME} 2>/dev/null || dropdb -h ${DATABASE_HOST} -U ${DATABASE_USER} ${DATABASE_NAME}
    - createdb -h ${DATABASE_HOST} -U ${DATABASE_USER} ${DATABASE_NAME} 2>/dev/null || echo "Database already exist."
    - docker stop ${CI_CONTAINER_NAME_SLUG} 2>/dev/null || echo "Container already stopped."
    - docker rm ${CI_CONTAINER_NAME_SLUG} 2>/dev/null || echo "Container already deleted."
    - docker pull ${CONTAINER_TEST_IMAGE}
    - docker create --restart=always --name ${CI_CONTAINER_NAME_SLUG} -e VIRTUAL_HOST=${CI_COMMIT_REF_SLUG}.${CI_ENVIRONMENT_DOMAIN} -e DATABASE_HOST=${DATABASE_HOST} -e DATABASE_USER=${DATABASE_USER} -e DATABASE_NAME=${DATABASE_NAME} -e DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE} -t ${CONTAINER_TEST_IMAGE}
    - docker start ${CI_CONTAINER_NAME_SLUG}
    - docker exec ${CI_CONTAINER_NAME_SLUG} python manage.py collectstatic --noinput
    - docker exec ${CI_CONTAINER_NAME_SLUG} python manage.py migrate --noinput
    - docker exec ${CI_CONTAINER_NAME_SLUG} python manage.py loaddata workplace/fixtures/workplace


REVIEW:STOP:
  stage: review
  when: manual
  only:
    - tags
    - /^feature_.*$/
    - /^infra_.*$/
  variables:
    DATABASE_NAME: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
    DJANGO_SETTINGS_MODULE: backend.settings.production
    CI_CONTAINER_NAME_SLUG: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}-2
    GIT_STRATEGY: none
  environment:
    name: ${CI_JOB_STAGE}/${CI_COMMIT_REF_NAME}
    action: stop
  before_script:
    - apk add curl postgresql-client --no-cache
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - dropdb -h ${DATABASE_HOST} -U ${DATABASE_USER} ${DATABASE_NAME} || echo "Database already dropped."
    - docker stop ${CI_CONTAINER_NAME_SLUG} 2>/dev/null || echo "Container already stopped."
    - docker rm ${CI_CONTAINER_NAME_SLUG} 2>/dev/null || echo "Container already deleted."


DEMO:CE:START:
  stage: preprod
  when: manual
  only:
    - tags
  variables:
    DATABASE_NAME: ${CI_PROJECT_NAME}
    DJANGO_SETTINGS_MODULE: backend.settings.production
    CI_CONTAINER_NAME_SLUG: ${CI_PROJECT_NAME}-demo
    HOST_MEDIA_DIR: /opt/workplace/media
    HOST_LOGS_DIR: /opt/workplace/logs
  environment:
    name: deploy/demo
    url: http://demo.${CI_ENVIRONMENT_DOMAIN}
  before_script:
    - apk add curl postgresql-client --no-cache
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - createdb -h ${DATABASE_HOST} -U ${DATABASE_USER} ${DATABASE_NAME} 2>/dev/null || echo "Database already exist."
    - docker stop ${CI_CONTAINER_NAME_SLUG} 2>/dev/null || echo "Container already stopped."
    - docker rm ${CI_CONTAINER_NAME_SLUG} 2>/dev/null || echo "Container already deleted."
    - docker pull ${CONTAINER_TEST_IMAGE}
    - docker create --restart=always --name ${CI_CONTAINER_NAME_SLUG} -e VIRTUAL_HOST=demo.${CI_ENVIRONMENT_DOMAIN} -v $HOST_MEDIA_DIR:/app/backend/media -v $HOST_LOGS_DIR:/app/backend/logs -e DATABASE_HOST=${DATABASE_HOST} -e DATABASE_USER=${DATABASE_USER} -e DATABASE_NAME=${DATABASE_NAME} -e DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE} -e CI_COMMIT_TAG=${CI_COMMIT_TAG} -t ${CONTAINER_TEST_IMAGE}
    - docker start ${CI_CONTAINER_NAME_SLUG}
    - docker exec ${CI_CONTAINER_NAME_SLUG} python manage.py collectstatic --noinput
    - docker exec ${CI_CONTAINER_NAME_SLUG} python manage.py migrate --noinput
    - docker exec ${CI_CONTAINER_NAME_SLUG} python manage.py loaddata workplace/fixtures/workplace

DEMO:CE:STOP:
  stage: preprod
  when: manual
  only:
    - tags
  variables:
    GIT_STRATEGY: none
    CI_CONTAINER_NAME_SLUG: ${CI_PROJECT_NAME}-demo
  environment:
    name: deploy/demo
    action: stop
  before_script:
    - apk add curl postgresql-client --no-cache
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker stop ${CI_CONTAINER_NAME_SLUG} 2>/dev/null || echo "Container already stopped."
    - docker rm ${CI_CONTAINER_NAME_SLUG} 2>/dev/null || echo "Container already deleted."